{
    attributes = (
        {
            allowsNull = Y; 
            columnName = "LABEL_ID"; 
            externalType = long; 
            name = labelID; 
            precision = 9; 
            serverTimeZone = "US/Pacific"; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            columnName = "ENTITY_NAME"; 
            externalType = varchar; 
            name = entityName; 
            serverTimeZone = "US/Pacific"; 
            valueClassName = NSString; 
            valueType = S; 
            width = 50; 
        }, 
        {
            columnName = NAME; 
            externalType = varchar; 
            name = name; 
            serverTimeZone = "US/Pacific"; 
            valueClassName = NSString; 
            valueType = S; 
            width = 255; 
        }, 
        {
            columnName = "ARTIST_ID"; 
            externalType = long; 
            name = artistID; 
            precision = 9; 
            serverTimeZone = "US/Pacific"; 
            valueClassName = NSNumber; 
            valueType = i; 
        }
    ); 
    attributesUsedForLocking = (labelID, entityName, name, artistID); 
    className = "com.apple.itunes.store.Artist"; 
    classProperties = (label, albums, groups, singles, entityName, name); 
    externalName = ARTIST; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        "_clientClassPropertyNames" = (label, albums, groups, singles, entityName, name); 
        uniqueID = 204204793; 
    }; 
    name = SoloArtist; 
    parent = Artist; 
    primaryKeyAttributes = (artistID); 
    relationships = (
        {
            destination = Label; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = labelID; sourceAttribute = labelID; }); 
            name = label; 
        }, 
        {
            destination = Album; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = artistID; sourceAttribute = artistID; }); 
            name = albums; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = ArtistGroup; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = artistID; sourceAttribute = artistID; }); 
            name = artistGroups; 
            propagatesPrimaryKey = Y; 
        }, 
        {
            definition = "artistGroups.group"; 
            joinSemantic = EOInnerJoin; 
            name = groups; 
        }, 
        {
            destination = MaxiSingle; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = artistID; sourceAttribute = artistID; }); 
            name = singles; 
        }
    ); 
    restrictingQualifier = "(entityName = 'SoloArtist')"; 
    userInfo = {fetchSpecificationDictionary = {}; }; 
}
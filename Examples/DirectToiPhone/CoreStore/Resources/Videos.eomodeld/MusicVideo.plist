{
    attributes = (
        {
            columnName = "ARTIST_ID"; 
            externalType = NUMBER; 
            name = artistID; 
            precision = 9; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            columnName = "GENRE_ID"; 
            externalType = NUMBER; 
            name = genreID; 
            precision = 9; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            columnName = "LABEL_ID"; 
            externalType = NUMBER; 
            name = labelID; 
            precision = 9; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = "LANGUAGE_ID"; 
            externalType = NUMBER; 
            name = languageID; 
            precision = 9; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            columnName = TITLE; 
            externalType = VARCHAR2; 
            name = title; 
            valueClassName = NSString; 
            width = 255; 
        }, 
        {
            columnName = "VIDEO_ID"; 
            externalType = NUMBER; 
            name = videoID; 
            precision = 9; 
            valueClassName = NSNumber; 
            valueType = i; 
        }
    ); 
    attributesUsedForLocking = (videoID, title, genreID, languageID, labelID, artistID); 
    className = EOGenericRecord; 
    classProperties = (title, genre, label, language, artist, products); 
    externalName = "MUSIC_VIDEO"; 
    fetchSpecificationDictionary = {}; 
    name = MusicVideo; 
    primaryKeyAttributes = (videoID); 
    relationships = (
        {
            destination = Artist; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = artistID; sourceAttribute = artistID; }); 
            name = artist; 
        }, 
        {
            destination = Genre; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = genreID; sourceAttribute = genreID; }); 
            name = genre; 
        }, 
        {
            destination = Label; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = labelID; sourceAttribute = labelID; }); 
            name = label; 
        }, 
        {
            destination = Language; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = languageID; sourceAttribute = languageID; }); 
            name = language; 
        }, 
        {
            deleteRule = EODeleteRuleCascade; 
            destination = DigitalMusicVideo; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = contentID; sourceAttribute = videoID; }); 
            name = products; 
            ownsDestination = Y; 
        }
    ); 
}
